{"ast":null,"code":"import ShopActionTypes from'./shop.types';import{firestore,convertCollectionsSnapshotToMap}from'../../firebase/firebase.utils';export var fetchCollectionsStart=function fetchCollectionsStart(){return{type:ShopActionTypes.FETCH_COLLECTIONS_START};};export var fetchCollectionsSuccess=function fetchCollectionsSuccess(collectionsMap){return{type:ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,payload:collectionsMap};};export var fetchCollectionsFailure=function fetchCollectionsFailure(errorMessage){return{type:ShopActionTypes.FETCH_COLLECTIONS_FAILURE,payload:errorMessage};};export var fetchCollectionStartAsync=function fetchCollectionStartAsync(){return function(dispatch){var collectionRef=firestore.collection('collections');dispatch(fetchCollectionsStart());collectionRef.get().then(function(snapshot){var collectionsMap=convertCollectionsSnapshotToMap(snapshot);dispatch(fetchCollectionsSuccess(collectionsMap));}).catch(function(error){return dispatch(fetchCollectionsFailure(error.message));});};};","map":{"version":3,"sources":["/Users/nina/crwn-clothing/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,MAAOA,CAAAA,eAAP,KAA4B,cAA5B,CAEA,OAASC,SAAT,CAAoBC,+BAApB,KAA0D,+BAA1D,CAGA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,SAAO,CACxCC,IAAI,CAACJ,eAAe,CAACK,uBADmB,CAAP,EAA9B,CAIP,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,cAAc,QAAK,CACtDH,IAAI,CAAEJ,eAAe,CAACQ,yBADgC,CAEtDC,OAAO,CAAEF,cAF6C,CAAL,EAA9C,CAKP,MAAO,IAAMG,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,YAAY,QAAK,CACpDP,IAAI,CAAEJ,eAAe,CAACY,yBAD8B,CAEpDH,OAAO,CAAEE,YAF2C,CAAL,EAA5C,CAKP,MAAO,IAAME,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,EAAM,CAC3C,MAAO,UAAAC,QAAQ,CAAI,CACf,GAAMC,CAAAA,aAAa,CAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CACAF,QAAQ,CAACX,qBAAqB,EAAtB,CAAR,CAEAY,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAA0B,SAAAC,QAAQ,CAAI,CAClC,GAAMZ,CAAAA,cAAc,CAAGL,+BAA+B,CAACiB,QAAD,CAAtD,CACAL,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR,CACH,CAHD,EAGGa,KAHH,CAGS,SAAAC,KAAK,QAAIP,CAAAA,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAAZ,EAHd,EAIH,CARD,CASH,CAVM","sourcesContent":["import ShopActionTypes from './shop.types';\n\nimport { firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils'\n\n\nexport const fetchCollectionsStart = () => ({\n    type:ShopActionTypes.FETCH_COLLECTIONS_START\n});\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n})\n\nexport const fetchCollectionsFailure = errorMessage => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n})\n\nexport const fetchCollectionStartAsync = () => {\n    return dispatch => {\n        const collectionRef = firestore.collection('collections');\n        dispatch(fetchCollectionsStart())\n\n        collectionRef.get().then( snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            dispatch(fetchCollectionsSuccess(collectionsMap));\n        }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n    }\n}"]},"metadata":{},"sourceType":"module"}