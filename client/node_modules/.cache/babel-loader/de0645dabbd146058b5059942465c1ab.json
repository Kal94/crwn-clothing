{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { SignInSuccess, SignInFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const UserRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield UserRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const UserRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield UserRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/ava/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","SignInSuccess","SignInFailure","auth","googleProvider","createUserProfileDocument","getSnapshotFromUserAuth","userAuth","user","signInWithPopup","error","signInWithGoogle","UserRef","userSnapshot","get","id","data","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAC/C,MACA;AACI,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAML,IAAI,CAACM,eAAL,CAAqBL,cAArB,CAArB;AACA,UAAME,uBAAuB,CAACE,IAAD,CAA7B;AACH,GAJD,CAKA,OAAOE,KAAP,EACA;AACI,UAAMb,GAAG,CAACK,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA8B;AACjC,MACA;AACI,UAAM;AAACH,MAAAA;AAAD,QAAS,MAAML,IAAI,CAACM,eAAL,CAAqBL,cAArB,CAArB;AACA,UAAMQ,OAAO,GAAG,MAAMb,IAAI,CAACM,yBAAD,EAA4BG,IAA5B,CAA1B;AACA,UAAMK,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMjB,GAAG,CAACI,aAAa,CAAC;AACpBc,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT;AAIH,GATD,CAUA,OAAON,KAAP,EACA;AACI,UAAMb,GAAG,CAACK,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUO,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAwD;AAC3D,MACA;AACI,UAAM;AAACZ,MAAAA;AAAD,QAAS,MAAML,IAAI,CAACkB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMR,OAAO,GAAG,MAAMb,IAAI,CAACM,yBAAD,EAA4BG,IAA5B,CAA1B;AACA,UAAMK,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMjB,GAAG,CAAEI,aAAa,CAAC;AACrBc,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADI;AAErB,SAAGF,YAAY,CAACG,IAAb;AAFkB,KAAD,CAAf,CAAT;AAIH,GATD,CAUA,OAAON,KAAP,EACA;AACI,UAAMb,GAAG,CAACK,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUY,mBAAV,GAAiC;AACpC,QAAM1B,UAAU,CAACI,eAAe,CAACuB,oBAAjB,EAAuCZ,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUa,kBAAV,GAA+B;AAClC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,mBAAjB,EAAsCR,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUS,SAAV,GAAsB;AACzB,QAAM5B,GAAG,CAAC,CACNC,IAAI,CAACuB,mBAAD,CADE,EAENvB,IAAI,CAACyB,kBAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport { SignInSuccess, SignInFailure } from './user.actions'\n\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n    try\n    {\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user)\n    } \n    catch (error)\n    {\n        yield put(SignInFailure(error));\n    }\n}\n\nexport function* signInWithGoogle () {\n    try\n    {\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        const UserRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield UserRef.get();\n        yield put(SignInSuccess({\n            id: userSnapshot.id,\n            ...userSnapshot.data()\n        }))\n    } \n    catch (error)\n    {\n        yield put(SignInFailure(error));\n    }\n}\n\nexport function* signInWithEmail({payload: {email, password}}) {\n    try \n    {\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\n        const UserRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield UserRef.get();\n        yield put (SignInSuccess({\n            id: userSnapshot.id,\n            ...userSnapshot.data()\n        }))\n    }\n    catch (error)\n    {\n        yield put(SignInFailure(error))\n    }\n}\n\nexport function* onGoogleSignInStart () {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart)\n    ])\n}"]},"metadata":{},"sourceType":"module"}